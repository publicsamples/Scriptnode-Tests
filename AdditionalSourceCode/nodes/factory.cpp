/** Autogenerated Main.cpp. */

// =================================| Include only the DSP files  |=================================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// ===========================| Now we can add the rest of the codebase |===========================

#include <JuceHeader.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"

// =======================================| Project Factory |=======================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations ----------------------------------------------------------------------
		
		registerPolyNode<project::Harmonicoscillator<1>, project::Harmonicoscillator<NUM_POLYPHONIC_VOICES>>();
		registerDataNode<project::CloneTEst_networkdata>();
		registerDataNode<project::clone_individual_values_networkdata>();
		registerDataNode<project::clone_individual_values_FM_networkdata>();
		registerDataNode<project::clone_individual_values_MOD_networkdata>();
		registerDataNode<project::EnvTest_networkdata>();
		registerDataNode<project::HarmonicOscillatorwithsliderpackmorphing_networkdata>();
		registerDataNode<project::minmaxtest_networkdata>();
		registerDataNode<project::node1_networkdata>();
		registerDataNode<project::SampleFM_networkdata>();
		registerDataNode<project::Switch_networkdata>();
		registerDataNode<project::WeirdDelay_networkdata>();
		registerDataNode<project::xf_networkdata>();
		registerDataNode<project::xf2_networkdata>();
		registerDataNode<project::xf3_networkdata>();
		registerDataNode<project::_4WaySwitch_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#pragma clang diagnostic pop


